import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris

Input1_df = pd.read_csv('/kaggle/input/vehicle-manufacturing-dataset/Car Data.csv')
Input1_df.info()
print(Input1_df.columns)
print(Input1_df.isnull().sum())
print(Input1_df.head(5))
print(Input1_df.tail(5))
print(Input1_df.sample(5))
missing_percentage = Input1_df.isnull().sum() / len(Input1_df) * 100
print(missing_percentage)
if (missing_percentage < 10).all():
    print("הקובץ אינו מתאים לפרויקט, יש לחפש קובץ אחר.")
else:
    print("הקובץ מתאים לפרויקט.")
print(Input1_df.describe())

Input2_df = pd.read_csv('/kaggle/input/car-sales-report/Car Sales.xlsx - car_data.csv')
Input2_df.info()
print(Input2_df.columns)
print(Input2_df.isnull().sum())
print(Input2_df.head(5))
print(Input2_df.tail(5))
print(Input2_df.sample(5))
missing_percentage = Input2_df.isnull().sum() / len(Input2_df) * 100
print(missing_percentage)
if (missing_percentage < 10).all():
    print("הקובץ אינו מתאים לפרויקט, יש לחפש קובץ אחר.")
else:
    print("הקובץ מתאים לפרויקט.")
print(Input2_df.describe())

df_join_outer = Input1_df.merge(Input2_df, on='car_id', how='outer')
print("df_join_outer:")
print(df_join_outer.head())
print(df_join_outer.info())

missing_values_join_outer = df_join_outer.isnull().sum()
print("מספר הערכים החסרים בכל עמודה בקובץ הממוזג:")
print(missing_values_join_outer)
missing_percentage_join_outer = (missing_values_join_outer / len(df_join_outer)) * 100
print("אחוז הערכים החסרים בכל עמודה בקובץ הממוזג:")
print(missing_percentage_join_outer)

df1 = df_join_outer[['car_id', 'brand_x', 'model_x', 'year', 'color', 'price']]
df2 = df_join_outer[['car_id', 'date', 'customer_name', 'gender', 'annual_income', 'dealer_name']]
print(df1.dtypes)
print(df2.dtypes)

def char_fixer(data_frame, series_name):
    cnt = 0
    for row in data_frame[series_name]:
        try:
            float(row)
        except ValueError:
            data_frame.drop([cnt], inplace=True)
        cnt += 1
    data_frame[series_name] = data_frame[series_name].astype('float64', errors='raise')
    data_frame.reset_index(drop=True, inplace=True)

char_fixer(df1, 'pricesold')
char_fixer(df1, 'yearsold')

def num_finder(data_frame, series_name):
    cnt = 0
    for row in data_frame[series_name]:
        try:
            int(float(row))
        except ValueError:
            if row == 'True' or row == 'False':
                print(data_frame.loc[cnt, series_name], "-> at row:" + str(cnt))
        else:
            print(data_frame.loc[cnt, series_name], "-> at row:" + str(cnt))
        cnt += 1

df1['pricesold'].fillna(df1['pricesold'].mean(), inplace=True)

def fill_missing_creative(data_frame, series_name):
    for i in range(len(data_frame)):
        if pd.isnull(data_frame.loc[i, series_name]):
            prev_index = i - 1
            next_index = i + 1
            while prev_index >= 0 and pd.isnull(data_frame.loc[prev_index, series_name]):
                prev_index -= 1
            while next_index < len(data_frame) and pd.isnull(data_frame.loc[next_index, series_name]):
                next_index += 1
            prev_value = data_frame.loc[prev_index, series_name] if prev_index >= 0 else None
            next_value = data_frame.loc[next_index, series_name] if next_index < len(data_frame) else None
            if prev_value is not None and next_value is not None:
                data_frame.loc[i, series_name] = (prev_value + next_value) / 2
            elif prev_value is not None:
                data_frame.loc[i, series_name] = prev_value
            elif next_value is not None:
                data_frame.loc[i, series_name] = next_value
            else:
                data_frame.loc[i, series_name] = data_frame[series_name].mean()

fill_missing_creative(df1, 'pricesold')

max_value_pricesold = df1['pricesold'].max()
df1['pricesold_norm'] = df1['pricesold'] / max_value_pricesold

duplicates = df1[df1.duplicated()]
print("All duplicate rows:")
print(duplicates)
df1.drop_duplicates(inplace=True)

def plot_linear_regression(df, x_feature, y_feature):
    plt.figure(figsize=(10, 6))
    sns.regplot(data=df, x=x_feature, y=y_feature, scatter_kws={'color': 'skyblue'}, line_kws={'color': 'red'})
    plt.title(f'Linear Regression: {x_feature} vs {y_feature}', fontsize=16)
    plt.xlabel(x_feature, fontsize=12)
    plt.ylabel(y_feature, fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.show()

from sklearn.cluster import KMeans
X = df1[['pricesold', 'yearsold']].dropna().values
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
y_kmeans = kmeans.fit_predict(X)

plt.figure(figsize=(12, 8))
colors = ['red', 'blue', 'green']
for i in range(optimal_clusters):
    plt.scatter(X[y_kmeans == i, 0], X[y_kmeans == i, 1], s=100, c=colors[i], label=f'Cluster {i+1}')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black', label='Centroids')
plt.title('Clusters of Cars')
plt.xlabel('Price Sold')
plt.ylabel('Year Sold')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

for i in range(optimal_clusters):
    clust
